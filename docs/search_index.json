[["graph-basics.html", "6 Graph basics 6.1 Introduction 6.2 Expected data structure 6.3 Anatomy of a graph 6.4 Layer: points 6.5 Layer: smooth fit 6.6 Layer: scale 6.7 Mapping columns to aesthetics 6.8 Layer: facets 6.9 Ordering panels and rows 6.10 Downloading files manually", " 6 Graph basics Decline by Randall Munroe (xkcd.com) is licensed under CC BY-NC 2.5 6.1 Introduction This tutorial is an introduction to ggplot2 adapted from Chapter 3 from [1]. If you already have R experience, you might still want to browse this section in case you find something new. Prerequisites should be completed before proceeding. After that, the tutorial should take about an hour. As you work through the tutorial, type a line or chunk of code then File &gt; Save and run the script. Confirm that your result matches the tutorial result. The exercises give you chance to practice your new skills to learn by doing (but you knew that already)! 6.1.1 Download prepared data Download the prepared_data_graph_basics.zip file from the workshop website with the following code. You can copy and paste the code to the Console; you only have to run this once. The destination file assumes you have a data directory in your project. zip_url &lt;- paste0(&quot;https://github.com/MIDFIELDR/2021-asee-workshop/&quot;, &quot;raw/main/data/prepared_data.zip&quot;) download.file(zip_url, destfile = &quot;data/prepared_data.zip&quot;) If the download is successful, Navigate to your data directory and extract the compressed files. Move the files into the top level of the data folder, which should now include: data\\ hours_per_term.rds sat.rds student_demogr.rds 6.1.2 Start a new script Create a new script for this tutorial. See Open an R script if you need a refresher on creating, saving, and running an R script. At the top of the script add a minimal header and install and load the packages indicated. # Graph basics # Name # Date # Packages used in this tutorial library(&quot;midfieldr&quot;) library(&quot;midfielddata&quot;) library(&quot;data.table&quot;) library(&quot;ggplot2&quot;) library(&quot;gapminder&quot;) # Optional code to control data.table printing options( datatable.print.nrows = 10, datatable.print.topn = 5, datatable.print.class = TRUE ) # Load midfielddata data sets to use later data(student) data(term) If you get an error like this one after running the script, Error in library(&quot;gapminder&quot;) : there is no package called &#39;gapminder&#39; then the package needs to be installed. If you need a refresher on installing packages, see Install CRAN packages. Once the missing package is installed, you can rerun the script. 6.2 Expected data structure Data for analysis and graphing are often laid out in block record or long form with every key variable and response variable in their own columns [2]. Database designers call this a denormalized form; many R users would recognize it as the so-called tidy form [3]. We use this form regularly for preparing data for graphing using the ggplot2 package. The gapminder data were using in this tutorial is in block-record form. To view its help page, run library(&quot;gapminder&quot;) ? gapminder # Convert the data frame to a data.table structure gapminder &lt;- data.table(gapminder) And we can just type its name to see a few rows. Note at the top of each column under the column name, the class of the variable is shown: factor &lt;fctr&gt;, integer &lt;int&gt;, and double-precision &lt;num&gt;. gapminder #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;int&gt; &lt;num&gt; &lt;int&gt; &lt;num&gt; #&gt; 1: Afghanistan Asia 1952 28.801 8425333 779.4453 #&gt; 2: Afghanistan Asia 1957 30.332 9240934 820.8530 #&gt; 3: Afghanistan Asia 1962 31.997 10267083 853.1007 #&gt; 4: Afghanistan Asia 1967 34.020 11537966 836.1971 #&gt; 5: Afghanistan Asia 1972 36.088 13079460 739.9811 #&gt; --- #&gt; 1700: Zimbabwe Africa 1987 62.351 9216418 706.1573 #&gt; 1701: Zimbabwe Africa 1992 60.377 10704340 693.4208 #&gt; 1702: Zimbabwe Africa 1997 46.809 11404948 792.4500 #&gt; 1703: Zimbabwe Africa 2002 39.989 11926563 672.0386 #&gt; 1704: Zimbabwe Africa 2007 43.487 12311143 469.7093 6.2.1 Exercise Examine the student data from midfielddata. (Type its name in the console.) How many variables? How many observations? How many of the variables are numeric? How many are character type? Is the data set in block-record form? Check your work by comparing your result to the student help page (link below). Help pages for more information: student gapminder 6.3 Anatomy of a graph ggplot() is a our basic plotting function. The data = ... argument assigns the data frame. The plot is empty because we havent mapped the data to coordinates yet. ggplot(data = gapminder) Next we use the mapping argument mapping = aes(...) to assign variables (column names) from the data frame to specific aesthetic properties of the graph such as the x-coordinate, the y-coordinate color, fill, etc. Here we map continent (a categorical variable) to x and life expectancy (a quantitative variable) to y. To reduce the number of times we repeat lines of code, we can assign a name (life_gdp) to the empty graph to which we can add layers later. # Demonstrate aesthetic mapping life_exp &lt;- ggplot(data = gapminder, mapping = aes(x = continent, y = lifeExp)) To reduce typing, the first two arguments data and mapping are often used without naming them explicitly, e.g., # Demonstrate implicit data and mapping arguments life_exp &lt;- ggplot(gapminder, aes(x = continent, y = lifeExp)) If we print the graph by typing the name of the graph object (everything in R is an object), we get a graph with a range on each axis (from the mapping) but no data shown. We havent specified the type of visual encoding we want. # Examine the result life_exp A box-and-whisker plot (or box plot) is designed for displaying the distribution of a single quantitative variable. The visual encoding is specified using the geom_boxplot() layer, where a geom is a geometric object. The geom_boxplot() function requires the quantitative variable assigned to y and the categorical variable (if any) to x. # Demonstrate adding a geometric object life_exp &lt;- life_exp + geom_boxplot() # Examine the result life_exp Notice that the default axis labels are the variables names from the data frame. We can edit those with another layer # Demonstrate editing axis labels life_exp &lt;- life_exp + labs(x = &quot;Continent&quot;, y = &quot;Life expectancy (years)&quot;) # Examine the result life_exp Next, we often want the categorical variable ordered by the quantitative variable instead of alphabetically. Because continent is a factor, we can use the reorder() function inside the aes() argument. # Demonstrate reordering a categorical variable life_exp + aes(x = reorder(continent, lifeExp), y = lifeExp) Summary. The basics steps for building up the layers of any graph: assign the data frame map variables (columns names) to aesthetic properties choose geoms adjust scales, labels, ordering, etc. Lastly, while we separate the layers as we work to focus on that specific layer, the layers can always be written in a single code chunk, e.g, ggplot(gapminder, aes(x = reorder(continent, lifeExp), y = lifeExp)) + geom_boxplot() + labs(x = &quot;Continent&quot;, y = &quot;Life expectancy (years)&quot;) 6.3.1 Exercise Examine the term data set from midfielddata. Create a boxplot of the hours per term quantity conditioned by the student level. What is the rational for leaving the categorical variable in its native order? Check your work by comparing your result to the graph below. Help pages for more information: term aes() geom_boxplot() geom_labs() 6.4 Layer: points A two-dimensional scatterplot reveals the strength of the relationship between two quantitative variables. The ggplot geom for scatterplots is geom_point(). To illustrate a scatterplot, we graph life expectancy as a function of GDP. life_gdp &lt;- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + labs(x = &quot;GDP per capita (USD)&quot;, y = &quot;Life expectancy (years)&quot;) life_gdp Help pages for more information: geom_point() 6.5 Layer: smooth fit Suppose you wanted a smooth fit curve, not necessarily linear. Add a geom_smooth() layer. The name loess (pronounced like the proper name Lois) is a nonparametric curve-fitting method based on local regression. life_gdp + geom_smooth(method = &quot;loess&quot;, se = FALSE) The se argument controls whether or not the confidence interval is displayed. Setting se = TRUE yields, life_gdp + geom_smooth(method = &quot;loess&quot;, se = TRUE) For a linear-fit layer, we change method to lm (short for linear model). The linear fit is not particularly good in this case, but now you know how to do one. life_gdp + geom_smooth(method = &quot;lm&quot;, se = TRUE) Help pages for more information: geom_smooth() 6.5.1 Exercise A data set has been extracted from the midfieldr student table with a sample of 3000 student SAT scores. These data, sat.rds are part of the prepared data from the .zip files you downloaded earlier. Here we read the data in using readRDS(). # Prepared data from the downloaded zip file sat &lt;- readRDS(&quot;data/sat.rds&quot;) Use the sat data and create a scatterplot of verbal scores sat_verbal as a function of math scores sat_math. Add a loess fit. Check your work by comparing your result to the graph below. 6.6 Layer: scale We have orders of magnitude differences in the GDP per capita variable. To confirm, we can create a summary() of the gdpPercap variable. The output shows that the minimum is 241, the median 3532, and the maximum 113,523. # statistical summary of one variable summary(gapminder[, gdpPercap]) #&gt; Min. 1st Qu. Median Mean 3rd Qu. Max. #&gt; 241.2 1202.1 3531.8 7215.3 9325.5 113523.1 In exploring a graph like this, it might be useful to add a layer that changes the horizontal scale to a log-base-10 scale. life_gdp &lt;- life_gdp + scale_x_continuous(trans = &quot;log10&quot;) Update the axis labels, life_gdp &lt;- life_gdp + labs(x = &quot;GDP per capita, USD (log10 scale)&quot;, y = &quot;Life expectancy (years)&quot;) life_gdp # display the graph In summary, all the layers could have been be coded at once, for example, ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point() + scale_x_continuous(trans = &quot;log10&quot;) + labs(x = &quot;GDP per capita, USD (log10 scale)&quot;, y = &quot;Life expectancy (years)&quot;) With all the layers in one place, we can see that weve coded all the basic steps, that is, assign the data frame map variables (columns names) to aesthetic properties choose geoms adjust scales, labels, ordering, etc. 6.6.1 Exercise The prepared data you downloaded earlier includes the file student_demogr.rds. The data in this file is a summary of the midfieldr student table with the number of students by race/ethnicity and sex, omitting International and Other/Unknown race values. Again, we read the data in using readRDS(). # Prepared data from the downloaded zip file student_demogr &lt;- readRDS(&quot;data/student_demogr.rds&quot;) Use the student_demogr data and reproduce the graph shown below. Use a log-base-2 scale. Omit the y-axis label by setting y = \"\" in the labs() argument. Help pages for more information: scale_x_continuous() 6.7 Mapping columns to aesthetics Mappings in the aes() function of ggplot() can involve the names of variables (column s) only. So far, the only mappings weve used are from column names to an x or y aesthetic. Another useful mapping is from a column name to the color argument, which then separates the data by the values of the categorical variable selected and automatically creates the appropriate legend. Here we map the continent column to the color aesthetic, adding a third data variable to the display. ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) + geom_point() + scale_x_continuous(trans = &quot;log10&quot;) + labs(x = &quot;GDP per capita, USD (log10 scale)&quot;, y = &quot;Life expectancy (years)&quot;) 6.7.1 Exercise The prepared data you downloaded earlier includes the file hours_per_term.rds. Again, we read the data using readRDS(). hours_per_term&lt;- readRDS(&quot;data/hours_per_term.rds&quot;) Use hours_per_termd data to create a boxplot of hours per term as a function of level. Add a third column name to aes() to add sex by color to the graph. Add the coord_flip() layer to your graph to swap the position of the x, y coordinates to obtain a horizontal boxplot. Check your work by comparing your result to the graph below. Help pages for more information: add_race_sex() coord_flip() 6.8 Layer: facets In the earlier graph where we mapped continent to color, there was a lot of overprinting, making it difficult to compare the continents. Instead of using color to distinguish the continents, we can plot in different panels by continent. The facet_wrap() layer separates the data into different panels (or facets). Like the aes() mapping, facet_wrap() is applied to a variable (column name) in the data frame. life_gdp &lt;- life_gdp + facet_wrap(facets = vars(continent)) life_gdp # print the graph Comparisons are facilitated by having the facets appear in one column, by using the ncol argument of facet_wrap(). life_gdp &lt;- life_gdp + facet_wrap(facets = vars(continent), ncol = 1) life_gdp # print the graph In a faceted display, all panels have identical scales (the default) to facilitate comparison. Again, all the layers could have been be coded at once, for example, ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + facet_wrap(facets = vars(continent), ncol = 1) + geom_point() + scale_x_continuous(trans = &quot;log10&quot;) + labs(x = &quot;GDP per capita, USD (log10 scale)&quot;, y = &quot;Life expectancy (years)&quot;) 6.8.1 Exercise Use the following code chunk to construct a data frame of program stickiness by program, race/ethnicity, and sex. # Access a data set included with midfieldr stickiness &lt;- copy(study_stickiness) # Create a combined categorical column stickiness[, race_sex := paste(race, sex)] # Factor class enables reordering stickiness[, race_sex := factor(race_sex)] stickiness[, program := factor(program)] # Omit ambiguous race/ethnicities and small populations stickiness &lt;- stickiness[!race_sex %ilike% c(&quot;Native|International|Other&quot;)] Use the resulting dtf data frame plot stickiness (x-axis) as a function of race/ethnicity/sex (y-axis) and faceted by program. When that graph seems OK, add a third column name to aes() to add sex by color to the graph. Check your work by comparing your result to the graph below. Help pages for more information: facet_wrap() 6.9 Ordering panels and rows Panels (facets) by default are nearly always ordered alphabetically. In most cases, ordering the panels by the data improves the display. Earlier, we used reorder() to order a set of boxplots. This function operates correctly on factor variables only. A factor is special data structure in R for categorical variables. In a factor, the levels of the categorytypically character stringsare known and fixed. However, factors are stored internally as integersa critical design tool for meaningfully ordering the rows and panels of a display involving categorical variables. In the gapminder data, the continent column is already a factors. gapminder #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;int&gt; &lt;num&gt; &lt;int&gt; &lt;num&gt; #&gt; 1: Afghanistan Asia 1952 28.801 8425333 779.4453 #&gt; 2: Afghanistan Asia 1957 30.332 9240934 820.8530 #&gt; 3: Afghanistan Asia 1962 31.997 10267083 853.1007 #&gt; 4: Afghanistan Asia 1967 34.020 11537966 836.1971 #&gt; 5: Afghanistan Asia 1972 36.088 13079460 739.9811 #&gt; --- #&gt; 1700: Zimbabwe Africa 1987 62.351 9216418 706.1573 #&gt; 1701: Zimbabwe Africa 1992 60.377 10704340 693.4208 #&gt; 1702: Zimbabwe Africa 1997 46.809 11404948 792.4500 #&gt; 1703: Zimbabwe Africa 2002 39.989 11926563 672.0386 #&gt; 1704: Zimbabwe Africa 2007 43.487 12311143 469.7093 We can reorder the levels of the factor before graphing as follows, gapminder[, continent := reorder(continent, lifeExp)] Then graph using much the same code chunk as before with one addition. We add the as.table = FALSE argument to the facet_wrap() function. Table-order of panels is increasing from top to bottom; graph-order increases (like a graph scale) from bottom to top. ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + facet_wrap(facets = vars(continent), ncol = 1, as.table = FALSE) + geom_point() + scale_x_continuous(trans = &quot;log10&quot;) + labs(x = &quot;GDP per capita, USD (log10 scale)&quot;, y = &quot;Life expectancy (years)&quot;) 6.9.1 Exercise Continue using the stickiness data frame from the previous section. Order the panels by the stickiness variable. Order race/ethnicity/sex by the stickiness variable. Check your work by comparing your result to the graph below. Help pages for more information: reorder() 6.10 Downloading files manually If a download using fread() fails, Navigate to the Workshop source files on GitHub Click on the file you want, taking you to its page. Right-click on Raw Download by selecting Save link as save to your workshop/data/ directory. Use fread() as before to read the file. For example, data_location &lt;- &quot;data/student_demogr.txt&quot; student_demogr &lt;- fread(data_location, colClasses = c(race_sex = &quot;factor&quot;)) dir(&#39;data&#39;) # [1] &quot;case2_course.rds&quot; &quot;case2_degree.rds&quot; # [3] &quot;case2_student.rds&quot; &quot;case2_term.rds&quot; # [5] &quot;example2.xlsx&quot; &quot;info_pkg.rds&quot; # [7] &quot;sat.csv&quot; &quot;student_demogr.csv&quot; # [9] &quot;student_demogr.txt&quot; &quot;student_demogr_2.txt&quot; # # data_location &lt;- &quot;data/student_demogr.txt&quot; # student_demogr &lt;- fread(data_location, colClasses = c(race_sex = &quot;factor&quot;)) # student_demogr[, race_sex := reorder(race_sex, N) ] # ggplot(student_demogr, aes(x = N, y = race_sex)) + # geom_point() + # scale_x_continuous(trans = &quot;log2&quot;) + # labs(x = &quot;Number of students admitted (log-2 scale)&quot;, y = &quot;&quot;) saveRDS(student_demogr, &quot;data/student_demogr.rds&quot;) student_demogr &lt;- readRDS(&quot;data/workshop_data/student_demogr.rds&quot;) zip( zipfile = zipfile, files = c(&quot;data/student_demogr.rds&quot;), include_directories = FALSE, root = &quot;.&quot;, mode = &quot;cherry-pick&quot; ) zip_append( zipfile = zipfile, files = c(&quot;data/student_demogr.rds&quot;), include_directories = FALSE, root = &quot;.&quot;, mode = &quot;cherry-pick&quot; ) student_demogr &lt;- readRDS(&quot;data/workshop_data/student_demogr.rds&quot;) ggplot(student_demogr, aes(x = N, y = race_sex)) + geom_point() + scale_x_continuous(trans = &quot;log2&quot;) + labs(x = &quot;Number of students admitted (log-2 scale)&quot;, y = &quot;&quot;) zip_url &lt;- paste0(&quot;https://github.com/MIDFIELDR/2021-asee-workshop/&quot;, &quot;raw/main/data/workshop_data.zip&quot;) download.file(zip_url, destfile = &quot;data/download_zip.zip&quot;)  top of page "]]
